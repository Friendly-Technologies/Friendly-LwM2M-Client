#ifndef SECURITY_H_
#define SECURITY_H_

#include <iostream>
#include "WppRegistry.h"
#include "ObjObserver.h"
#include "InstObserver.h"

using namespace wpp;
using namespace std;

class SecurityImpl: public ObjObserver<Security>, public InstObserver<Security> {
	public:
    void init(Object<Security> &securityObj) {
        securityObj.subscribe(this);
        Security *security = securityObj.createInstance();
        security->subscribe(this);
        
        string url = "coaps://leshan.eclipseprojects.io:";
        #if DTLS_WITH_PSK
        url += "5684";
        string pskId = "SINAI_TEST_DEV_ID";
        security->set(Security::SECURITY_MODE, (INT_T)LWM2M_SECURITY_MODE_PRE_SHARED_KEY);
        security->set(Security::PUBLIC_KEY, OPAQUE_T(pskId.begin(), pskId.end()));
        security->set(Security::SECRET_KEY, OPAQUE_T {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44});
        #elif DTLS_WITH_RPK
        url += "5684";
        security->set(Security::SECURITY_MODE, (INT_T)LWM2M_SECURITY_MODE_RAW_PUBLIC_KEY);
        security->set(Security::PUBLIC_KEY, OPAQUE_T {0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xff, 0xd8, 0x5d, 0xeb, 0x4a, 0x66, 0x40, 0xf4, 0x30, 0x0d, 0x9f, 0x04, 0x6f, 0xe3, 0x42, 0xa9, 0x95, 0xf3, 0xa8, 0xa3, 0x20, 0x3f, 0xe7, 0xd2, 0xc3, 0x2a, 0x9b, 0xe1, 0x78, 0x87, 0x75, 0x2e, 0x6d, 0x6c, 0x58, 0x5b, 0x8d, 0x8a, 0xb8, 0x48, 0x97, 0x90, 0x07, 0xf7, 0x75, 0xfd, 0x15, 0x3c, 0x5a, 0x45, 0xf2, 0xa8, 0xf1, 0xe5, 0x56, 0x25, 0x86, 0x8d, 0x6a, 0x92, 0x8d, 0xbc, 0x77, 0xd5});
        security->set(Security::SECRET_KEY, OPAQUE_T {0x30, 0x77, 0x02, 0x01, 0x01, 0x04, 0x20, 0x42, 0x60, 0x1d, 0xb0, 0xb3, 0xa9, 0xa1, 0xa0, 0xb6, 0xdc, 0xab, 0x94, 0xf7, 0x1c, 0x2c, 0x44, 0x38, 0x3d, 0x6a, 0x2a, 0x61, 0x9b, 0xac, 0x33, 0xea, 0x20, 0x90, 0x83, 0x4f, 0x4e, 0xd5, 0xf9, 0xa0, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0xff, 0xd8, 0x5d, 0xeb, 0x4a, 0x66, 0x40, 0xf4, 0x30, 0x0d, 0x9f, 0x04, 0x6f, 0xe3, 0x42, 0xa9, 0x95, 0xf3, 0xa8, 0xa3, 0x20, 0x3f, 0xe7, 0xd2, 0xc3, 0x2a, 0x9b, 0xe1, 0x78, 0x87, 0x75, 0x2e, 0x6d, 0x6c, 0x58, 0x5b, 0x8d, 0x8a, 0xb8, 0x48, 0x97, 0x90, 0x07, 0xf7, 0x75, 0xfd, 0x15, 0x3c, 0x5a, 0x45, 0xf2, 0xa8, 0xf1, 0xe5, 0x56, 0x25, 0x86, 0x8d, 0x6a, 0x92, 0x8d, 0xbc, 0x77, 0xd5});
        #else
        url += "5683";
        #endif

        #if LWM2M_BOOTSTRAP
        security->set(Security::BOOTSTRAP_SERVER, true);
        security->set(Security::HOLD_OFF_TIME, (INT_T)10);
        #else
        security->set(Security::BOOTSTRAP_SERVER, false);
        #endif

        security->set(Security::SERVER_URI, (STRING_T)url);
        security->set(Security::SERVER_ID, (INT_T)123);
    }

	void objectRestore(Object<Security> &object) override {
		cout << "Security: objectRestore: " << (ID_T)object.getObjectID() << endl;
		object.clear();
        init(object);
	}

    void instanceCreated(Object<Security> &object, ID_T instanceId) override {
        cout << "Security: instanceCreated: " << (ID_T)object.getObjectID() << ":" << instanceId << endl;
    }

    void instanceDeleting(Object<Security> &object, ID_T instanceId) override {
		cout << "Security: instanceDeleting: " << (ID_T)object.getObjectID() << ":" << instanceId << endl;
	}

	virtual void resourceRead(Security &inst, const ResLink &resId) override {
        cout << "Security: resourceRead: " << (ID_T)inst.getObjectID() << ":" << inst.getInstanceID() << ":" << resId.resId << ":" << resId.resInstId << endl;
    }

    virtual void resourceWrite(Security &inst, const ResLink &resId) override {
        cout << "Security: resourceWrite: " << (ID_T)inst.getObjectID() << ":" << inst.getInstanceID() << ":" << resId.resId << ":" << resId.resInstId << endl;
    }

    virtual void resourceExecute(Security &inst, const ResLink &resId) override {
        cout << "Security: resourceExecute: " << (ID_T)inst.getObjectID() << ":" << inst.getInstanceID() << ":" << resId.resId << ":" << resId.resInstId << endl;
    }
};

#endif // SECURITY_H_