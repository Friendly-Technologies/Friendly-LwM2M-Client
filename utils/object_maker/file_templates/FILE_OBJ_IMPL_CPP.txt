/*
 * __CLASS_NAME__
 * Generated on: __DATETIME__
 * Created by: SinaiR&D
 */

#include "__OBJ_FOLDER__/__CLASS_NAME__.h"

#include "Resource.h"
#include "ItemOp.h"
#include "WppTypes.h"
#include "WppLogs.h"
#include "WppClient.h"

/* --------------- Code_cpp block 0 start --------------- */
/* --------------- Code_cpp block 0 end --------------- */

#define TAG "__CLASS_NAME__"

namespace wpp {

__CLASS_NAME__::__CLASS_NAME__(lwm2m_context_t &context, const OBJ_LINK_T &id): Instance(context, id) {

	/* --------------- Code_cpp block 1 start --------------- */
	/* --------------- Code_cpp block 1 end --------------- */

	resourcesCreate();
	resourcesInit();

	/* --------------- Code_cpp block 2 start --------------- */
	/* --------------- Code_cpp block 2 end --------------- */
}

__CLASS_NAME__::~__CLASS_NAME__() {
	/* --------------- Code_cpp block 3 start --------------- */
	/* --------------- Code_cpp block 3 end --------------- */
}

__CLASS_NAME__ * __CLASS_NAME__::create(WppClient &ctx, ID_T instId) {
	Instance *inst = ctx.registry().__CLASS_NAME_CAMELCASE__().createInstance(instId);
	if (!inst) return NULL;
	return static_cast<__CLASS_NAME__*>(inst);
}

bool __CLASS_NAME__::remove(WppClient &ctx, ID_T instId) {
	return ctx.registry().__CLASS_NAME_CAMELCASE__().remove(instId);
}

__CLASS_NAME__ * __CLASS_NAME__::instance(WppClient &ctx, ID_T instId) {
	Instance *inst = ctx.registry().__CLASS_NAME_CAMELCASE__().instance(instId);
	if (!inst) return NULL;
	return static_cast<__CLASS_NAME__*>(inst);
}

__F_SERVER_OPERATION_NOTIFIER__

__F_USER_OPERATION_NOTIFIER__

void __CLASS_NAME__::resourcesCreate() {
	std::vector<Resource> resources = {
__RESOURCES_TABLE__
	};
	setupResources(std::move(resources));
}

__F_RESOURCE_INIT__

/* --------------- Code_cpp block 8 start --------------- */
/* --------------- Code_cpp block 8 end --------------- */

} /* namespace wpp */
