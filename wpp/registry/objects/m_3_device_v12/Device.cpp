/*
 * File type: FILE_TYPE_OBJ_IMPL_CPP
 * Generated on: 2023-10-13 18:40:00
 * Author: valentin
 * Generated by: Vadimzakreva
 */

#include "m_3_device_v12/Device.h"

#include <unordered_map>
#include <iostream>

#include "Resource.h"
#include "ResOp.h"
#include "types.h"
#include "WppLogs.h"

/* --------------- Code_cpp block 0 start --------------- */
#if RES_3_9
#define BUTT_LVL_MIN	0
#define BUTT_LVL_MAX	100
#endif
/* --------------- Code_cpp block 0 end --------------- */

#define TAG "Device"

namespace wpp {

Device::Device(lwm2m_context_t &context, const OBJ_LINK_T &id): Instance(context, id) {

	/* --------------- Code_cpp block 1 start --------------- */
	/* --------------- Code_cpp block 1 end --------------- */

	resourcesCreate();
	resourcesInit();

	/* --------------- Code_cpp block 2 start --------------- */
	/* --------------- Code_cpp block 2 end --------------- */
}

Device::~Device() {
	/* --------------- Code_cpp block 3 start --------------- */
	/* --------------- Code_cpp block 3 end --------------- */
}

void Device::setDefaultState() {
	/* --------------- Code_cpp block 4 start --------------- */
	/* --------------- Code_cpp block 4 end --------------- */

	_resources.clear();
	resourcesCreate();
	resourcesInit();

	/* --------------- Code_cpp block 5 start --------------- */
	/* --------------- Code_cpp block 5 end --------------- */
}

void Device::serverOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 6 start --------------- */
	/* --------------- Code_cpp block 6 end --------------- */

	observerNotify(*this, resId, type);

	/* --------------- Code_cpp block 7 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "Server READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "Server WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::EXECUTE:
		WPP_LOGD_ARG(TAG, "Server EXECUTE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DISCOVER:
		WPP_LOGD_ARG(TAG, "Server DISCOVER -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "Server DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 7 end --------------- */
}

void Device::userOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 8 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "User READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "User WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "User DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 8 end --------------- */
}

void Device::resourcesCreate() {
	std::vector<Resource> resources = {
		// KEY   VALUE
		#if RES_3_0                                                                                                                                                                                                      
		{MANUFACTURER_0,                        ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING },          
		#endif                                                                                                                                                                                                           
		#if RES_3_1                                                                                                                                                                                                      
		{MODEL_NUMBER_1,                        ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING },          
		#endif                                                                                                                                                                                                           
		#if RES_3_2                                                                                                                                                                                                      
		{SERIAL_NUMBER_2,                       ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING },          
		#endif                                                                                                                                                                                                           
		#if RES_3_3                                                                                                                                                                                                      
		{FIRMWARE_VERSION_3,                    {FIRMWARE_VERSION_3,                    ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		{REBOOT_4,                              ResOp(ResOp::EXECUTE),                  IS_SINGLE::SINGLE,          IS_MANDATORY::MANDATORY,        TYPE_ID::EXECUTE },         
		#if RES_3_5                                                                                                                                                                                                      
		{FACTORY_RESET_5,                       {FACTORY_RESET_5,                       ResOp(ResOp::EXECUTE),                  IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::EXECUTE }},         
		#endif                                                                                                                                                                                                           
		#if RES_3_6                                                                                                                                                                                                      
		{AVAILABLE_POWER_SOURCES_6,             {AVAILABLE_POWER_SOURCES_6,             ResOp(ResOp::READ),                     IS_SINGLE::MULTIPLE,        IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_7                                                                                                                                                                                                      
		{POWER_SOURCE_VOLTAGE_7,                {POWER_SOURCE_VOLTAGE_7,                ResOp(ResOp::READ),                     IS_SINGLE::MULTIPLE,        IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_8                                                                                                                                                                                                      
		{POWER_SOURCE_CURRENT_8,                {POWER_SOURCE_CURRENT_8,                ResOp(ResOp::READ),                     IS_SINGLE::MULTIPLE,        IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_9                                                                                                                                                                                                      
		{BATTERY_LEVEL_9,                       {BATTERY_LEVEL_9,                       ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_10                                                                                                                                                                                                     
		{MEMORY_FREE_10,                        {MEMORY_FREE_10,                        ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		{ERROR_CODE_11,                         ResOp(ResOp::READ),                     IS_SINGLE::MULTIPLE,        IS_MANDATORY::MANDATORY,        TYPE_ID::INT },             
		#if RES_3_12                                                                                                                                                                                                     
		{RESET_ERROR_CODE_12,                   {RESET_ERROR_CODE_12,                   ResOp(ResOp::EXECUTE),                  IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::EXECUTE }},         
		#endif                                                                                                                                                                                                           
		#if RES_3_13                                                                                                                                                                                                     
		{CURRENT_TIME_13,                       {CURRENT_TIME_13,                       ResOp(ResOp::READ|ResOp::WRITE),        IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::TIME }},            
		#endif                                                                                                                                                                                                           
		#if RES_3_14                                                                                                                                                                                                     
		{UTC_OFFSET_14,                         {UTC_OFFSET_14,                         ResOp(ResOp::READ|ResOp::WRITE),        IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		#if RES_3_15                                                                                                                                                                                                     
		{TIMEZONE_15,                           {TIMEZONE_15,                           ResOp(ResOp::READ|ResOp::WRITE),        IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		{SUPPORTED_BINDING_AND_MODES_16,        ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::MANDATORY,        TYPE_ID::STRING },          
		#if RES_3_17                                                                                                                                                                                                     
		{DEVICE_TYPE_17,                        {DEVICE_TYPE_17,                        ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		#if RES_3_18                                                                                                                                                                                                     
		{HARDWARE_VERSION_18,                   {HARDWARE_VERSION_18,                   ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		#if RES_3_19                                                                                                                                                                                                     
		{SOFTWARE_VERSION_19,                   {SOFTWARE_VERSION_19,                   ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::STRING }},          
		#endif                                                                                                                                                                                                           
		#if RES_3_20                                                                                                                                                                                                     
		{BATTERY_STATUS_20,                     {BATTERY_STATUS_20,                     ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_21                                                                                                                                                                                                     
		{MEMORY_TOTAL_21,                       {MEMORY_TOTAL_21,                       ResOp(ResOp::READ),                     IS_SINGLE::SINGLE,          IS_MANDATORY::OPTIONAL,         TYPE_ID::INT }},             
		#endif                                                                                                                                                                                                           
		#if RES_3_22                                                                                                                                                                                                     
		{EXTDEVINFO_22,                         {EXTDEVINFO_22,                         ResOp(ResOp::READ),                     IS_SINGLE::MULTIPLE,        IS_MANDATORY::OPTIONAL,         TYPE_ID::OBJ_LINK }},        
		#endif                                                                                                                                                                                                           
	};
	_resources = std::move(resources);
}

void Device::resourcesInit() {
	/* --------------- Code_cpp block 9 start --------------- */
	#if RES_3_0                                                                                                                                                                                        
	getResIter(MANUFACTURER_0)->set(STRING_T(""));
	#endif          

	#if RES_3_1  
	getResIter(MODEL_NUMBER_1)->set(STRING_T(""));                                                                                                                                                                                        
	#endif                                                                                                                                                                                                              
	
	#if RES_3_2                                                                                                                                                                                         
	getResIter(SERIAL_NUMBER_2)->set(STRING_T("")); 
	#endif                                                                                                                                                                                                              
	
	#if RES_3_3                                                                                                                                                                                        
	getResIter(FIRMWARE_VERSION_3)->set(STRING_T("")); 
	#endif                                                                                                                                                                                                                                     

	#if RES_3_6
	getResIter(AVAILABLE_POWER_SOURCES_6)->set(INT_T(PWR_SRC_MAX));
	getResIter(AVAILABLE_POWER_SOURCES_6)->setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return DC <= value && value < PWR_SRC_MAX; });
	#endif

	#if RES_3_7
	getResIter(POWER_SOURCE_VOLTAGE_7)->set(INT_T(0));                                                                                                                                                                                 
	#endif                                                                                                                                                                                                              
	
	#if RES_3_8
	getResIter(POWER_SOURCE_CURRENT_8)->set(INT_T(0));                                                                                                                                                                                  
	#endif 
	
	#if RES_3_9
	getResIter(BATTERY_LEVEL_9)->set(INT_T(BUTT_LVL_MIN));
	getResIter(BATTERY_LEVEL_9)->setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return BUTT_LVL_MIN <= value && value <= BUTT_LVL_MAX; });
	#endif

	#if RES_3_10
	getResIter(MEMORY_FREE_10)->set(INT_T(0));                                                                                                                                                                                         
	#endif

	getResIter(ERROR_CODE_11)->set((INT_T)NO_ERROR);
	getResIter(ERROR_CODE_11)->setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return NO_ERROR <= value && value < ERR_CODE_MAX; });
	
	#if RES_3_12
	getResIter(RESET_ERROR_CODE_12)->set((EXECUTE_T)[this](ID_T id, const OPAQUE_T& buff) { 
		this->getResIter(ERROR_CODE_11)->clear();
		getResIter(ERROR_CODE_11)->set((INT_T)NO_ERROR);
	});
	#endif

	#if RES_3_13
	getResIter(CURRENT_TIME_13)->set(TIME_T(0));                                                                                                                                                                                       
	#endif                                                                                                                                                                                                              
	
	#if RES_3_14
	getResIter(UTC_OFFSET_14)->set(STRING_T(""));                                                                                                                                                                                             
	#endif                                                                                                                                                                                                              
	
	#if RES_3_15
	getResIter(TIMEZONE_15)->set(STRING_T(""));                                                                                                                                                                                     
	#endif

	getResIter(SUPPORTED_BINDING_AND_MODES_16)->set(STRING_T(""));
	getResIter(SUPPORTED_BINDING_AND_MODES_16)->setDataVerifier((VERIFY_STRING_T)([](const STRING_T& value) { return wppBindingValidate(value); }));

	#if RES_3_17
	getResIter(DEVICE_TYPE_17)->set(STRING_T(""));                                                                                                                                                                                           
	#endif

	#if RES_3_18
	getResIter(HARDWARE_VERSION_18)->set(STRING_T(""));                                                                                                                                                                              
	#endif                                                                                                                                                                                                              
	
	#if RES_3_19
	getResIter(SOFTWARE_VERSION_19)->set(STRING_T(""));                                                                                                                                                                                    
	#endif                 

	#if RES_3_20
	getResIter(BATTERY_STATUS_20)->set(INT_T(BUTT_STATUS_MAX));
	getResIter(BATTERY_STATUS_20)->setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return NORMAL <= value && value < BUTT_STATUS_MAX; });
	#endif

	#if RES_3_21                                                                                                                                                                                          
	getResIter(MEMORY_TOTAL_21)->set((INT_T)NO_ERROR);
	#endif                                                                                                                                                                                                              
	
	#if RES_3_22                                                                                                                                                                                       
	getResIter(EXTDEVINFO_22)->set(OBJ_LINK_T());
	#endif     
	/* --------------- Code_cpp block 9 end --------------- */
}

/* --------------- Code_cpp block 10 start --------------- */
/* --------------- Code_cpp block 10 end --------------- */

} /* namespace wpp */
