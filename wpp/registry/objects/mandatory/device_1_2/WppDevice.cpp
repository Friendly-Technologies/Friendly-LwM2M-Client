/*
 * WppDevice
 * Generated on: 2023-10-11 15:40:32.908209
 * Author: valentin
 * Generated by: Vadimzakreva
 */

#include "mandatory/device_1_2/WppDevice.h"

#include <unordered_map>
#include <iostream>

#include "Resource.h"
#include "ResOp.h"
#include "types.h"
#include "WppLogs.h"

/* --------------- Code_cpp block 0 start --------------- */
#if RES_BATTERY_LEVEL_3_9
#define BUTT_LVL_MIN	0
#define BUTT_LVL_MAX	100
#endif
/* --------------- Code_cpp block 0 end --------------- */

#define TAG "WppDevice"

namespace wpp {

WppDevice::WppDevice(lwm2m_context_t &context, const OBJ_LINK_T &id): Instance(context, id) {

	/* --------------- Code_cpp block 1 start --------------- */
	/* --------------- Code_cpp block 1 end --------------- */

	resourcesInit();

	/* --------------- Code_cpp block 2 start --------------- */
	/* --------------- Code_cpp block 2 end --------------- */
}

WppDevice::~WppDevice() {
	/* --------------- Code_cpp block 3 start --------------- */
	/* --------------- Code_cpp block 3 end --------------- */
}

Resource * WppDevice::getResource(ID_T id) {
	// Check if resource ID is valid
	if (_resources.find(id) == _resources.end()) return NULL;
	return &_resources[id];
}

std::vector<Resource *> WppDevice::getResourcesList() {
	std::vector<Resource *> list;
	for (auto &pair : _resources) {
		list.push_back(&pair.second);
	}
	return list;
}

std::vector<Resource *> WppDevice::getResourcesList(const ResOp& filter) {
	std::vector<Resource *> list;
	for (auto &pair : _resources) {
		if (filter.isCompatible(pair.second.getOperation())) list.push_back(&pair.second);
	}
	return list;
}

std::vector<Resource *> WppDevice::getInstantiatedResourcesList() {
	std::vector<Resource *> list;
	for (auto &pair : _resources) {
		if (!pair.second.isEmpty()) list.push_back(&pair.second);
	}
	return list;
}

std::vector<Resource *> WppDevice::getInstantiatedResourcesList(const ResOp& filter) {
	std::vector<Resource *> list;
	for (auto &pair : _resources) {
		if (!pair.second.isEmpty() && filter.isCompatible(pair.second.getOperation())) list.push_back(&pair.second);
	}
	return list;
}

void WppDevice::setDefaultState() {
	/* --------------- Code_cpp block 4 start --------------- */
	/* --------------- Code_cpp block 4 end --------------- */

	for (auto &pair : _resources) pair.second.clear();
	resourcesInit();

	/* --------------- Code_cpp block 5 start --------------- */
	/* --------------- Code_cpp block 5 end --------------- */
}

void WppDevice::serverOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 6 start --------------- */
	/* --------------- Code_cpp block 6 end --------------- */

	observerNotify(*this, resId, type);

	/* --------------- Code_cpp block 7 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "Server READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "Server WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::EXECUTE:
		WPP_LOGD_ARG(TAG, "Server EXECUTE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DISCOVER:
		WPP_LOGD_ARG(TAG, "Server DISCOVER -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "Server DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 7 end --------------- */
}

void WppDevice::userOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 8 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "User READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "User WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "User DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 8 end --------------- */
}

	/* --------------- Class private methods --------------- */
void WppDevice::resourcesInit() {
	/* --------------- Code_cpp block 9 start --------------- */
	#if RES_AVAILABLE_POWER_SOURCES_3_6
	_resources[AVAILABLE_POWER_SOURCES_6].setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return DC <= value && value < PWR_SRC_MAX; });
	#endif
	
	#if RES_BATTERY_LEVEL_3_9
	_resources[BATTERY_LEVEL_9].setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return BUTT_LVL_MIN <= value && value <= BUTT_LVL_MAX; });
	#endif

	_resources[ERROR_CODE_11].set((INT_T)NO_ERROR);
	_resources[ERROR_CODE_11].setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return NO_ERROR <= value && value < ERR_CODE_MAX; });
	
	#if RES_RESET_ERROR_CODE_3_12
	_resources[RESET_ERROR_CODE_12].set((EXECUTE_T)[this](ID_T id, const OPAQUE_T& buff) { 
		this->_resources[ERROR_CODE_11].clear();
		_resources[ERROR_CODE_11].set((INT_T)NO_ERROR);
	});
	#endif

	_resources[SUPPORTED_BINDING_AND_MODES_16].set(STRING_T(""));
	_resources[SUPPORTED_BINDING_AND_MODES_16].setDataVerifier((VERIFY_STRING_T)([](const STRING_T& value) { return wppBindingValidate(value); }));

	#if RES_BATTERY_STATUS_3_20
	_resources[BATTERY_STATUS_20].setDataVerifier((VERIFY_INT_T)[](const INT_T& value) { return NORMAL <= value && value < BUTT_STATUS_MAX; });
	#endif
	/* --------------- Code_cpp block 9 end --------------- */
}

/* --------------- Code_cpp block 10 start --------------- */
/* --------------- Code_cpp block 10 end --------------- */

} /* namespace wpp */
