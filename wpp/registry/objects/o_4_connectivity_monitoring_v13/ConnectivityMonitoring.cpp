/*
 * ConnectivityMonitoring
 * Generated on: 2023-10-30 17:09:17
 * Author: valentin
 * Generated by: Vadimzakreva
 */

#include "o_4_connectivity_monitoring_v13/ConnectivityMonitoring.h"

#include <unordered_map>
#include <iostream>

#include "Resource.h"
#include "ResOp.h"
#include "types.h"
#include "WppLogs.h"

/* --------------- Code_cpp block 0 start --------------- */
/* --------------- Code_cpp block 0 end --------------- */

#define TAG "ConnectivityMonitoring"

namespace wpp {

ConnectivityMonitoring::ConnectivityMonitoring(lwm2m_context_t &context, const OBJ_LINK_T &id): Instance(context, id) {

	/* --------------- Code_cpp block 1 start --------------- */
	/* --------------- Code_cpp block 1 end --------------- */

	resourcesCreate();
	resourcesInit();

	/* --------------- Code_cpp block 2 start --------------- */
	/* --------------- Code_cpp block 2 end --------------- */
}

ConnectivityMonitoring::~ConnectivityMonitoring() {
	/* --------------- Code_cpp block 3 start --------------- */
	/* --------------- Code_cpp block 3 end --------------- */
}

void ConnectivityMonitoring::setDefaultState() {
	/* --------------- Code_cpp block 4 start --------------- */
	/* --------------- Code_cpp block 4 end --------------- */

	_resources.clear();
	resourcesCreate();
	resourcesInit();

	/* --------------- Code_cpp block 5 start --------------- */
	/* --------------- Code_cpp block 5 end --------------- */
}

void ConnectivityMonitoring::serverOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 6 start --------------- */
	/* --------------- Code_cpp block 6 end --------------- */

	observerNotify(*this, resId, type);

	/* --------------- Code_cpp block 7 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "Server READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "Server WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::EXECUTE:
		WPP_LOGD_ARG(TAG, "Server EXECUTE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DISCOVER:
		WPP_LOGD_ARG(TAG, "Server DISCOVER -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "Server DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 7 end --------------- */
}

void ConnectivityMonitoring::userOperationNotifier(ResOp::TYPE type, const ResLink &resId) {
	/* --------------- Code_cpp block 8 start --------------- */
	switch (type) {
	case ResOp::READ:
		WPP_LOGD_ARG(TAG, "User READ -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::WRITE:
		WPP_LOGD_ARG(TAG, "User WRITE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	case ResOp::DELETE:
		WPP_LOGD_ARG(TAG, "User DELETE -> resId: %d, resInstId: %d", resId.resId, resId.resInstId);
		break;
	default: break;
	}
	/* --------------- Code_cpp block 8 end --------------- */
}

void ConnectivityMonitoring::resourcesCreate() {
	std::vector<Resource> resources = {
		// KEY VALUE
		{NETWORK_BEARER_0,              ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::MANDATORY, TYPE_ID::INT },    
		#endif                                                                                                                                                  
		{AVAILABLE_NETWORK_BEARER_1,    ResOp(ResOp::READ), IS_SINGLE::MULTIPLE, IS_MANDATORY::MANDATORY, TYPE_ID::INT },    
		#endif                                                                                                                                                  
		{RADIO_SIGNAL_STRENGTH_2,       ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::MANDATORY, TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_3                                                                                                                                             
		{LINK_QUALITY_3,                ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		{IP_ADDRESSES_4,                ResOp(ResOp::READ), IS_SINGLE::MULTIPLE, IS_MANDATORY::MANDATORY, TYPE_ID::STRING }, 
		#endif                                                                                                                                                  
		#if RES_4_5                                                                                                                                             
		{ROUTER_IP_ADDRESSES_5,         ResOp(ResOp::READ), IS_SINGLE::MULTIPLE, IS_MANDATORY::OPTIONAL,  TYPE_ID::STRING }, 
		#endif                                                                                                                                                  
		#if RES_4_6                                                                                                                                             
		{LINK_UTILIZATION_6,            ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_7                                                                                                                                             
		{APN_7,                         ResOp(ResOp::READ), IS_SINGLE::MULTIPLE, IS_MANDATORY::OPTIONAL,  TYPE_ID::STRING }, 
		#endif                                                                                                                                                  
		#if RES_4_8                                                                                                                                             
		{CELL_ID_8,                     ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_9                                                                                                                                             
		{SMNC_9,                        ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_10                                                                                                                                            
		{SMCC_10,                       ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_11                                                                                                                                            
		{SIGNALSNR_11,                  ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_12                                                                                                                                            
		{LAC_12,                        ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
		#if RES_4_13                                                                                                                                            
		{COVERAGE_ENHANCEMENT_LEVEL_13, ResOp(ResOp::READ), IS_SINGLE::SINGLE,   IS_MANDATORY::OPTIONAL,  TYPE_ID::INT },    
		#endif                                                                                                                                                  
	};
	_resources = std::move(resources);
}

void ConnectivityMonitoring::resourcesInit() {
	/* --------------- Code_cpp block 9 start --------------- */
// TODO: The most part of the server resources logic must be implemented
// on wakaama core level, because the Server is only a state holder and
// at this level, it does not have the required information for doing
// sings described in the documentation.

	+getResIter(NETWORK_BEARER_0)->set( /* TODO */ );
	+getResIter(NETWORK_BEARER_0)->setDataVerifier( /* TODO */ );

	+getResIter(AVAILABLE_NETWORK_BEARER_1)->set( /* TODO */ );
	+getResIter(AVAILABLE_NETWORK_BEARER_1)->setDataVerifier( /* TODO */ );

	+getResIter(RADIO_SIGNAL_STRENGTH_2)->set( /* TODO */ );
	+getResIter(RADIO_SIGNAL_STRENGTH_2)->setDataVerifier( /* TODO */ );

	#if RES_4_3
	-getResIter(LINK_QUALITY_3)->set( /* TODO */ );
	-getResIter(LINK_QUALITY_3)->setDataVerifier( /* TODO */ );
	#endif

	+getResIter(IP_ADDRESSES_4)->set( /* TODO */ );
	+getResIter(IP_ADDRESSES_4)->setDataVerifier( /* TODO */ );

	#if RES_4_5
	-getResIter(ROUTER_IP_ADDRESSES_5)->set( /* TODO */ );
	-getResIter(ROUTER_IP_ADDRESSES_5)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_6
	-getResIter(LINK_UTILIZATION_6)->set( /* TODO */ );
	-getResIter(LINK_UTILIZATION_6)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_7
	-getResIter(APN_7)->set( /* TODO */ );
	-getResIter(APN_7)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_8
	-getResIter(CELL_ID_8)->set( /* TODO */ );
	-getResIter(CELL_ID_8)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_9
	-getResIter(SMNC_9)->set( /* TODO */ );
	-getResIter(SMNC_9)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_10
	-getResIter(SMCC_10)->set( /* TODO */ );
	-getResIter(SMCC_10)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_11
	-getResIter(SIGNALSNR_11)->set( /* TODO */ );
	-getResIter(SIGNALSNR_11)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_12
	-getResIter(LAC_12)->set( /* TODO */ );
	-getResIter(LAC_12)->setDataVerifier( /* TODO */ );
	#endif

	#if RES_4_13
	-getResIter(COVERAGE_ENHANCEMENT_LEVEL_13)->set( /* TODO */ );
	-getResIter(COVERAGE_ENHANCEMENT_LEVEL_13)->setDataVerifier( /* TODO */ );
	#endif

	/* --------------- Code_cpp block 9 end --------------- */
}

/* --------------- Code_cpp block 10 start --------------- */
/* --------------- Code_cpp block 10 end --------------- */

} /* namespace wpp */
